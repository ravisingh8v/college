#PRACTICAL :- 8
#Aim:- Car auction network: A Hello World example with Hyperledger Fabric Node SDK and IBM
#Block chain Starter Plan. Use Hyperledger Fabric to invoke chaincode while storing results and data
#in the starter plan.

#Step 1. Clone the repo
=> git clone https://github.com/horeaporutiu/carauction-network.git

#Then, go ahead and go into the directory:
$ cd carauction-network

#Step 2. Enroll App


#IMPORTANT to HAVE IBM CLOUD account

First, we need to generate the necessary keys and certs from the Certificate Authority to prove our
authenticity to the network. To do this, we will go into our new IBM Blockchain Starter Plan
network, and from the Overview Tab on the left, 
we will click on Connection Profile on the rightside of the page. 
Then click on Raw JSON.
Open enrolladmin.js in an editor of your choice. 
I prefer VSCode. Down around line 40 of the file, 
you will see a new instance of the Fabric_CA_Client. 
This is where we need to give our application the necessary endpoints of our CA from our IBM Blockchain
Starter Plan.

We will need 4 things from the Certificate Authority

1. enrollId - should be "admin"
2. enrollSecret - should be similar to "1dcab332aa"
3. url - should be similar to "nde288ef7dd7542d3a1cc824a02be67f1-org1-ca.us02.blockchain.ibm.com:31011"
4. caName - should be "org1CA"

##Your code should look something like this when finished:

=> fabric_ca_client = new Fabric_CA_Client('https://admin:4352f3499a@nd61fdbe87a194a10bde3cccdb90d427e-org1-
   ca.us04.blockchain.ibm.com:31011', null ,"org1CA", crypto_suite);

##Once you fill out the necessary info as shown in the gif above, move down to the call to enroll the
CA. You will need to add in the enrollSecret there again. Should be around line 55.

##Your code should look something like this when finished (note, this is just a small chunk of the
code)

return fabric_ca_client.enroll({
 enrollmentID: 'admin',
 enrollmentSecret: '4252f3499a'
 }).then((enrollment) =>


#Save your file, and open cmd where enrolladmin located run npm install in cmd:
=> npm install

#Then, run this command to enroll the admin:
=> node enrollAdmin.js

output ***

###Register Users

#open registerUser.js file form that repo in any editor (IDE) and make this change in this variable

=> fabric_ca_client = new Fabric_CA_Client('https://admin:4352f3499a@nd61fdbe87a194a10bde3cccdb90d427e-org1-
ca.us04.blockchain.ibm.com:31011', null ,"org1CA", crypto_suite);

output: ***

=> $ node registerUser.js 

open IBM Starter plan

1. go to install code 
2. click on install chaincode
3. fill this in three of them
   Chaincode ID: carauction
   Chaincode Version: 1
   Chaincode Type: Node

4. Now in choose file Choose your chaincode files from the carauction directory which in that repo we r working at. This is very important. You need to select
both carauction.js and package.json.

5. then submit

6. Once the chaincode in installed, we need to instantiate it. From the same screen, click on the 3-dot symbol
under Actions. Then click Instantiate.

7. For Chaincode Type select Node. Then click Next. Next, leave the defaults on the next screen, which show a
simple endorsement policy. Just click Submit.

8.Next, let's click on the Channels tab on the left side. Then click on the defaultchannel. You should see
the total blocks and time since last transaction. If we click on the block number, we can see
our initLedger function being called, and the data that was written to the ledger.

9.Open invoke.js in the editor of your choice. You'll see at the top of the file we import our connection profile
from IBM Blockchain Platform with this line:

=> var creds = require('./creds.json');

#Just save the file and then use this command to invoke chaincode on our network:
$ node invoke.js

#Lastly, we can refresh our page where we can see the details of defaultchannel and we should see a our
total blocks increase by one. This is due to our last call to invoke.js.


# Go to line 60 of invoke.js and copy and paste this code instead what was there before. We are now going to
call the makeOffer method and pass in 3 arguments as shown in the code below:

=> var request = {
 //targets: let default to the peer assigned to the client
 chaincodeId: 'carauction',
 fcn: 'makeOffer',
 args: ['3000', 'ABCD', 'memberA@acme.org'],
 chainId: 'mychannel',
 txId: tx_id
};

#save and run this 
=> node invoke.js

##you get error 

#Next, let's give a successful transaction. Copy and paste the code for the request as follows:

=> var request = {
 //targets: let default to the peer assigned to the client
 chaincodeId: 'carauction',
 fcn: 'makeOffer',
 args: ['4000', 'ABCD', 'memberB@acme.org'],
 chainId: 'mychannel',
 txId: tx_id
};

#save and run this 
=> node invoke.js

#Next, let's give another successful offer. Copy and paste the code for the request as follows:
=> var request = {
 //targets: let default to the peer assigned to the client
 chaincodeId: 'carauction',
 fcn: 'makeOffer',
 args: ['5000', 'ABCD', 'memberC@acme.org'],
 chainId: 'mychannel',
 txId: tx_id
};

#save and run this 
=> node invoke.js


Step 6. Querying the Ledger

#change this is query.js file 

=> const request = {
 //targets : --- letting this default to the peers assigned to the channel
 chaincodeId: 'carauction',
 fcn: 'query',
 args: ['memberA@acme.org']
 };

 #and run query.js
 => node query.js

#again with diff data
 const request = {
 //targets : --- letting this default to the peers assigned to the channel
 chaincodeId: 'carauction',
 fcn: 'query',
 args: ['memberC@acme.org']
 };

 #and run query.js
 => node query.js

#again 
 const request = {
 //targets : --- letting this default to the peers assigned to the channel
 chaincodeId: 'carauction',
 fcn: 'query',
 args: ['1234']
 };

 #and run query.js
 => node query.js